<?php
/**
 * @file
 * Instagram feed functionality.
 */

/**
 * Implements hook_menu().
 */
function instagram_menu() {
  $items['admin/config/services/instagram/settings'] = array(
    'title' => 'Instagram settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instagram_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'instagram.pages.inc',
  );
  return $items;
}

/**
 * Returns latest photos by a user id.
 */
function instagram_get_photos($instagram_user_id = '', $instagram_limit = 10, $obtain_from_cache = FALSE) {
  $instagram_user_id = $instagram_user_id ? $instagram_user_id : 'self';
  $instagram_limit = intval($instagram_limit) ? intval($instagram_limit) : 10;
  $instagram_user_id = check_plain($instagram_user_id);

  $result_data = NULL;
  $key = md5($instagram_user_id . substr(time(), 0, 5));
  if ($obtain_from_cache) {
    $data = cache_get('instagram_response_' . $key, 'cache');
    if (!empty($data->data)) {
      $result_data = $data->data;
    }
  }
  if (!$result_data) {
    $result_data = instagram_api_call($instagram_user_id, $instagram_limit);
  }
  
  return $result_data;
}

/**
 * Implements hook_theme().
 */
function instagram_theme() {
  return array(
    'instagram_list' => array(
      'variables' => array('data' => array()),
      'template' => 'instagram-list',
    ),
  );
}

/**
 * Implements hook_preprocess_theme().
 */
function instagram_preprocess_instagram_list(&$vars) {
  $vars['follow_link'] = '';
  $instagram_follow_link = variable_get('instagram_follow_link', '');
  if ($instagram_follow_link) {
    $vars['follow_link'] = $instagram_follow_link;
  }

  $vars['pictures'] = array();
  $i = 0;
  foreach ($vars['photos'] as $photo) {
    if ($photo['type'] != 'image') {
      continue;
    }
    $vars['pictures'][$i]['comments'] = $photo['comments']['count'];
    $vars['pictures'][$i]['likes'] = $photo['likes']['count'];
	$vars['pictures'][$i]['caption'] = $photo['caption']['text'];
    $photo['images']['thumbnail']['url'] = preg_replace('#^https\:\/\/#i', 'http://', $photo['images']['thumbnail']['url']);
    if (module_exists('jail')) {
      $vars['pictures'][$i]['image'] = theme('jail_formatter', array('item' => array('uri' => $photo['images']['thumbnail']['url'])));
    }
    else {
      $vars['pictures'][$i]['image'] = theme('image', array('path' => $photo['images']['thumbnail']['url']));
    }
	$attributes = array('target' => '_blank', 'title' => t('View picture on Instagram'));
	$vars['pictures'][$i]['image'] = l($vars['pictures'][$i]['image'], $photo['link'], array('html' => TRUE, 'attributes' => $attributes));
    $i++;
  }

  unset($vars['photos']);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function instagram_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Makes external call to instagram api.
 */
function instagram_api_call($instagram_user_id, $instagram_limit) {
  $key = md5($instagram_user_id . substr(time(), 0, 5));
  $access_token = check_plain(variable_get('instagram_api_key', ''));
  if (empty($access_token)) {
    watchdog('Instagram', 'Instagram access token missing.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  $url = 'https://api.instagram.com/v1/users/' . $instagram_user_id . '/media/recent/?access_token=' . $access_token . '&count=' . $instagram_limit;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, url($url));
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

  $response = curl_exec($ch);
  if (curl_errno($ch)) {
    watchdog('Instagram', 'Curl error: !error', array('!error' => curl_error($ch)), WATCHDOG_ERROR);
  }
  curl_close($ch);

  $result = drupal_json_decode($response);
  if (!empty($result['data'])) {
    $result_data = $result['data'];
    cache_set('instagram_response_' . $key, $result_data, 'cache', strtotime('+1 hour'));
    return $result_data;
  }
  return NULL;
}
